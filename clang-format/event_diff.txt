--- event_original.cpp	2024-01-20 00:31:45.482327400 +0100
+++ /mnt/c/Users/adzic/Desktop/vs/2023_Analysis_24-kalendar/2023_Analysis_24-kalendar/24-kalendar/calendar/sources/event.cpp	2024-01-20 00:31:45.534327300 +0100
@@ -1,224 +1,160 @@
 #include "../headers/event.h"
-#include <QString>
+#include "../headers/attachmentinfo.h"
+#include "../headers/calendarwindow.h"
 #include "../headers/eventwindow.h"
-#include "ui_eventwindow.h"
 #include "ui_calendarwindow.h"
-#include "../headers/calendarwindow.h"
-#include "../headers/attachmentinfo.h"
+#include "ui_eventwindow.h"
+#include <QString>
 #include <iostream>
 
+Event::Event(QString id, QString title, QString description, QDate startDate,
+             QDate endDate, QTime startTime, QTime endTime)
+    : m_id(id), m_title(title), m_description(description),
+      m_startDate(startDate), m_endDate(endDate), m_startTime(startTime),
+      m_endTime(endTime) {}
+
+Event::Event(QString title, QString description, QDate startDate, QDate endDate,
+             QTime startTime, QTime endTime)
+    : m_title(title), m_description(description), m_startDate(startDate),
+      m_endDate(endDate), m_startTime(startTime), m_endTime(endTime) {}
+
+Event::Event() {}
+
+Event::Event(Event *e, QDate startDate, QDate endDate) {
+  m_title = e->get_title();
+  m_description = e->get_description();
+  m_startTime = e->get_startTime();
+  m_endTime = e->get_endTime();
+  m_repeat = Event::Dont_repeat;
+  m_startDate = startDate;
+  m_endDate = endDate;
+  m_alertNum = e->getAlertNum();
+  m_alertType = e->getAlertType();
+  m_noAlert = e->getNoAlert();
+  m_useDefaultAlert = e->getUseDefaultAlert();
+}
+
+void Event::set_title(Ui::EventWindow *ui) { m_title = ui->leTitle->text(); }
+void Event::set_description(Ui::EventWindow *ui) {
+  m_description = ui->teDescription->toPlainText();
+}
+void Event::set_startDate(Ui::EventWindow *ui) {
+  m_startDate = ui->deStart->date();
+}
+void Event::set_endDate(Ui::EventWindow *ui) { m_endDate = ui->deEnd->date(); }
+void Event::set_startTime(Ui::EventWindow *ui) {
+  m_startTime = ui->teStart->time();
+}
+void Event::set_endTime(Ui::EventWindow *ui) { m_endTime = ui->teEnd->time(); }
 
-Event::Event(QString id,QString title,QString description,QDate startDate,QDate endDate,QTime startTime,QTime endTime)
-    :m_id(id), m_title(title), m_description(description), m_startDate(startDate), m_endDate(endDate), m_startTime(startTime),
-      m_endTime(endTime)
-{}
-
-Event::Event(QString title, QString description, QDate startDate, QDate endDate, QTime startTime, QTime endTime)
-    :m_title(title), m_description(description), m_startDate(startDate), m_endDate(endDate), m_startTime(startTime),
-      m_endTime(endTime)
-{}
-
-Event::Event()
-{}
-
-Event::Event(Event *e, QDate startDate, QDate endDate){
-    m_title = e->get_title();
-    m_description = e->get_description();
-    m_startTime = e->get_startTime();
-    m_endTime = e->get_endTime();
+void Event::set_repeat(Ui::EventWindow *ui) {
+  if (ui->rBRepeat->isChecked())
     m_repeat = Event::Dont_repeat;
-    m_startDate = startDate;
-    m_endDate = endDate;
-    m_alertNum = e->getAlertNum();
-    m_alertType = e->getAlertType();
-    m_noAlert = e->getNoAlert();
-    m_useDefaultAlert = e->getUseDefaultAlert();
+  else if (ui->cbRepeat->currentText() == "days")
+    m_repeat = Event::Days;
+  else if (ui->cbRepeat->currentText() == "weeks")
+    m_repeat = Event::Weeks;
+  else if (ui->cbRepeat->currentText() == "months")
+    m_repeat = Event::Months;
+  else if (ui->cbRepeat->currentText() == "years")
+    m_repeat = Event::Years;
 }
 
-void Event::set_title(Ui::EventWindow *ui){
-    m_title = ui->leTitle->text();
-}
-void Event::set_description(Ui::EventWindow *ui){
-   m_description = ui->teDescription->toPlainText();
-}
-void Event::set_startDate(Ui::EventWindow *ui){
-    m_startDate = ui->deStart->date();
-}
-void Event::set_endDate(Ui::EventWindow *ui){
-    m_endDate = ui->deEnd->date();
-}
-void Event::set_startTime(Ui::EventWindow *ui){
-    m_startTime = ui->teStart->time();
-}
-void Event::set_endTime(Ui::EventWindow *ui){
-    m_endTime = ui->teEnd->time();
+QVector<AttachmentInfo *> Event::getAttachments() const {
+  return m_attachments;
 }
 
+void Event::set_duration(Ui::EventWindow *ui) {
+  m_duration = ui->spbDuration->text().toInt();
+}
 
-void Event::set_repeat(Ui::EventWindow *ui) {
-    if(ui->rBRepeat->isChecked())
-        m_repeat = Event::Dont_repeat;
-    else if(ui->cbRepeat->currentText() == "days")
-        m_repeat = Event::Days;
-    else if(ui->cbRepeat->currentText() == "weeks")
-        m_repeat = Event::Weeks;
-    else if(ui->cbRepeat->currentText() == "months")
-        m_repeat = Event::Months;
-    else if(ui->cbRepeat->currentText() == "years")
-        m_repeat = Event::Years;
-}
-
-QVector<AttachmentInfo*> Event::getAttachments() const
-{
-    return m_attachments;
-}
-
-void Event::set_duration(Ui::EventWindow *ui)
-{
-    m_duration = ui->spbDuration->text().toInt();
-}
-
-void Event::set_interval(Ui::EventWindow *ui)
-{
-    m_interval = ui->spbInterval->text().toInt();
+void Event::set_interval(Ui::EventWindow *ui) {
+  m_interval = ui->spbInterval->text().toInt();
 }
 
 void Event::set_alert(Ui::EventWindow *ui) {
-    if(ui->rbNoAlert->isChecked())
-        m_noAlert = true;
-    else {
-        m_noAlert = false;
-        if(ui->cbAlertType->currentText() == "Notification")
-            m_alertType = "popup";
-        else if(ui->cbAlertType->currentText() == "Email")
-            m_alertType = "email";
-        auto spinBoxValue = ui->spbAlert->value();
-        if(ui->cbAlertUnitOfTime->currentText() == "minutes"){
-             m_alertNum = spinBoxValue;
-             //ako je posstavljeno na 30 minuta to je po google default
-             if(m_alertNum == 30)
-                 m_useDefaultAlert = true;
-        }
-        else if(ui->cbAlertUnitOfTime->currentText() == "hours")
-             m_alertNum = spinBoxValue*60;
-        else if(ui->cbAlertUnitOfTime->currentText() == "days")
-            m_alertNum = spinBoxValue*1440;
-        else if(ui->cbAlertUnitOfTime->currentText() == "weeks")
-            m_alertNum = spinBoxValue*10080;
-    }
+  if (ui->rbNoAlert->isChecked())
+    m_noAlert = true;
+  else {
+    m_noAlert = false;
+    if (ui->cbAlertType->currentText() == "Notification")
+      m_alertType = "popup";
+    else if (ui->cbAlertType->currentText() == "Email")
+      m_alertType = "email";
+    auto spinBoxValue = ui->spbAlert->value();
+    if (ui->cbAlertUnitOfTime->currentText() == "minutes") {
+      m_alertNum = spinBoxValue;
+      // ako je posstavljeno na 30 minuta to je po google default
+      if (m_alertNum == 30)
+        m_useDefaultAlert = true;
+    } else if (ui->cbAlertUnitOfTime->currentText() == "hours")
+      m_alertNum = spinBoxValue * 60;
+    else if (ui->cbAlertUnitOfTime->currentText() == "days")
+      m_alertNum = spinBoxValue * 1440;
+    else if (ui->cbAlertUnitOfTime->currentText() == "weeks")
+      m_alertNum = spinBoxValue * 10080;
+  }
 }
 
-void Event::setAttachments(const QVector<AttachmentInfo*> &value)
-{
-    m_attachments = value;
+void Event::setAttachments(const QVector<AttachmentInfo *> &value) {
+  m_attachments = value;
 }
 
-void Event::addAttachment(AttachmentInfo *attachment)
-{
-    m_attachments.push_back(attachment);
+void Event::addAttachment(AttachmentInfo *attachment) {
+  m_attachments.push_back(attachment);
 }
 
-QString Event::getId() const
-{
-    return m_id;
-}
+QString Event::getId() const { return m_id; }
 
-void Event::setId(const QString &id)
-{
-    m_id = id;
-}
+void Event::setId(const QString &id) { m_id = id; }
 
-QString Event::getAlertType() const
-{
-    return m_alertType;
-}
+QString Event::getAlertType() const { return m_alertType; }
 
-void Event::setAlertType(const QString &alertType)
-{
-    m_alertType = alertType;
-}
+void Event::setAlertType(const QString &alertType) { m_alertType = alertType; }
 
-unsigned Event::getAlertNum() const
-{
-    return m_alertNum;
-}
+unsigned Event::getAlertNum() const { return m_alertNum; }
 
-void Event::setAlertNum(const unsigned &alertNum)
-{
-    m_alertNum = alertNum;
-}
+void Event::setAlertNum(const unsigned &alertNum) { m_alertNum = alertNum; }
 
-bool Event::getNoAlert() const
-{
-    return m_noAlert;
-}
+bool Event::getNoAlert() const { return m_noAlert; }
 
-void Event::setNoAlert(bool noAlert)
-{
-    m_noAlert = noAlert;
-}
+void Event::setNoAlert(bool noAlert) { m_noAlert = noAlert; }
 
-bool Event::getUseDefaultAlert() const
-{
-    return m_useDefaultAlert;
-}
+bool Event::getUseDefaultAlert() const { return m_useDefaultAlert; }
 
-void Event::setUseDefaultAlert(bool useDefaultAlert)
-{
-    m_useDefaultAlert = useDefaultAlert;
+void Event::setUseDefaultAlert(bool useDefaultAlert) {
+  m_useDefaultAlert = useDefaultAlert;
 }
 
-int Event::getDuration() const
-{
-    return m_duration;
-}
+int Event::getDuration() const { return m_duration; }
 
-void Event::setDuration(int duration)
-{
-    m_duration = duration;
-}
+void Event::setDuration(int duration) { m_duration = duration; }
 
-int Event::getInterval() const
-{
-    return m_interval;
-}
+int Event::getInterval() const { return m_interval; }
 
-void Event::setInterval(int interval)
-{
-    m_interval = interval;
-}
+void Event::setInterval(int interval) { m_interval = interval; }
 
-QString Event::get_title(){
-    return m_title;
-}
-QString Event::get_description(){
-    return m_description;
-}
-QDate Event::get_startDate(){
-    return m_startDate;
-}
-QDate Event::get_endDate(){
-    return m_endDate;
-}
-QTime Event::get_startTime(){
-    return m_startTime;
-}
-QTime Event::get_endTime(){
-    return m_endTime;
-}
-Event::Repeat Event::get_repeat(){
-    return m_repeat;
-}
+QString Event::get_title() { return m_title; }
+QString Event::get_description() { return m_description; }
+QDate Event::get_startDate() { return m_startDate; }
+QDate Event::get_endDate() { return m_endDate; }
+QTime Event::get_startTime() { return m_startTime; }
+QTime Event::get_endTime() { return m_endTime; }
+Event::Repeat Event::get_repeat() { return m_repeat; }
 
-QString Event::recurrenceToString()
-{
-    switch (m_repeat) {
-        case Days: return QString("DAILY");
-        case Weeks : return QString("WEEKLY");
-        case Months : return QString("MONTHLY");
-        case Years : return QString("YEARLY");
-        case Dont_repeat : return QString("NO_REPEAT");
-        default: return QString("INVALID");
-    }
+QString Event::recurrenceToString() {
+  switch (m_repeat) {
+  case Days:
+    return QString("DAILY");
+  case Weeks:
+    return QString("WEEKLY");
+  case Months:
+    return QString("MONTHLY");
+  case Years:
+    return QString("YEARLY");
+  case Dont_repeat:
+    return QString("NO_REPEAT");
+  default:
+    return QString("INVALID");
+  }
 }
-
